-- Create events table if it doesn't exist
CREATE TABLE IF NOT EXISTS public.events (
    id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name text NOT NULL,
    start_date date NOT NULL,
    end_date date,
    location text,
    start_time time without time zone,
    end_time time without time zone,
    revenue numeric,
    status text DEFAULT 'Planejado'::text,
    description text,
    roster jsonb,
    expenses jsonb,
    client_id uuid,
    pipeline_status text,
    estimated_value numeric,
    service_ids uuid[],
    notes text,
    tags text[],
    responsible_id uuid,
    next_action text,
    next_action_date timestamp with time zone,
    pipeline_rank integer DEFAULT 0,
    created_at timestamp with time zone DEFAULT now(),
    updated_at timestamp with time zone DEFAULT now()
);

-- Enable RLS if not already enabled
DO $$
BEGIN
    IF NOT EXISTS (SELECT 1 FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE c.relname = 'events' AND n.nspname = 'public' AND c.relrowsecurity = true) THEN
        ALTER TABLE public.events ENABLE ROW LEVEL SECURITY;
    END IF;
END $$;

-- Create policies conditionally
DO $$
BEGIN
    IF NOT EXISTS (SELECT 1 FROM pg_policies WHERE tablename = 'events' AND policyname = 'Events are viewable by authenticated users') THEN
        CREATE POLICY "Events are viewable by authenticated users" ON public.events
        FOR SELECT TO authenticated USING (true);
    END IF;

    IF NOT EXISTS (SELECT 1 FROM pg_policies WHERE tablename = 'events' AND policyname = 'Admins and Coordinators can insert events') THEN
        CREATE POLICY "Admins and Coordinators can insert events" ON public.events
        FOR INSERT TO authenticated WITH CHECK (true);
    END IF;

    IF NOT EXISTS (SELECT 1 FROM pg_policies WHERE tablename = 'events' AND policyname = 'Admins and Coordinators can update events') THEN
        CREATE POLICY "Admins and Coordinators can update events" ON public.events
        FOR UPDATE TO authenticated USING (true);
    END IF;

    IF NOT EXISTS (SELECT 1 FROM pg_policies WHERE tablename = 'events' AND policyname = 'Admins can delete events') THEN
        CREATE POLICY "Admins can delete events" ON public.events
        FOR DELETE TO authenticated USING (true);
    END IF;
END $$;

-- Create trigger for updated_at if not exists
CREATE OR REPLACE FUNCTION public.handle_updated_at()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = timezone('utc'::text, now());
    RETURN NEW;
END;
$$ language 'plpgsql';

DO $$
BEGIN
    IF NOT EXISTS (SELECT 1 FROM pg_trigger WHERE tgname = 'handle_updated_at_events') THEN
        CREATE TRIGGER handle_updated_at_events
            BEFORE UPDATE ON public.events
            FOR EACH ROW
            EXECUTE PROCEDURE public.handle_updated_at();
    END IF;
END $$;